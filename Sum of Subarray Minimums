Sum of Subarray Minimums
Given an array of integers arr, find the sum of the minimums of all contiguous subarrays of the array. Since the answer may be large, print the answer modulo 10^9 + 7.

Your task is to complete the function minSubarraySum which receives arr and size of array as parameters and returns the sum of the minimums of all contiguous subarrays of the array

Input Format
The first line contains a single integer n(size of the array).

The second line contains n space integers that denote the elements of the array.

Output Format
Print the sum of minimum of all subarrays.

Example 1
Input

4
3 1 2 4
Output

17
Explanation

Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4].
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2
Input

3
1 2 3
Output

10
Explanation

Subarrays are [1], [2], [3], [1,2], [2,3], [1,2,3].
Minimums are 1, 2, 3, 1, 2, 1.
Sum is 10.

Constraints
1 <= arr.length <= 3 * 10^4
1 <= arr[i] <= 3 * 10^4

Topics
Stacks


import java.io.*;
import java.util.*;

class Solution{
    //calculate next smaller or equal on left
    public int[] nextSmallerElementOnLeft(int arr[], int n){
        Stack<Integer> st =new Stack<>();
        int nseli[]=new int[n];

        for(int i=n-1;i>=0;i--){
            int ele=arr[i];

            if(st.size()>0 && ele<=arr[st.peek()]){
                int idx=st.pop();
                nseli[idx]=i;
            }
            st.push(i);
        }
        while(st.size()>0){
            int idx=st.pop();
                nseli[idx]=-1;
        }
        return nseli;
    }

    //calculate next smaller or  on right
    public int[] nextSmallerElementOnRight(int arr[], int n){
        Stack<Integer> st =new Stack<>();
        int nseri[]=new int[n];

        for(int i=0;i<n;i++){
            int ele=arr[i];

            if(st.size()>0 && ele<arr[st.peek()]){
                int idx=st.pop();
                nseri[idx]=i;
            }
            st.push(i);
        }
        while(st.size()>0){
            int idx=st.pop();
                nseri[idx]=n;
        }
        return nseri;
    }
    long mod=1000000007;
	public long minSubarraySum(int n, int a[]){
		// write code here
        int mod=1000000007;
        int lb[]=nextSmallerElementOnLeft(a,n);
        int rb[]=nextSmallerElementOnRight(a,n);

        long sum=0;
        for(int i=0;i<n;i++){
            int A=i-lb[i]-1;
            int B=rb[i]-i-1;

           long totalOfSubarray = (1 + (A * 1) + (1 * B) + (A * 1 * B)) % mod;

            sum = (sum + (totalOfSubarray * a[i]) % mod) % mod;
        }
        return sum;
	}
}

public class Main {
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int a[] = new int[n];
        for(int i = 0; i < n; i++){
            a[i] = input.nextInt();
        }
		Solution Obj = new Solution();
        System.out.println(Obj.minSubarraySum(n,a));
    }
}
